// ============================================================================
// N8N Neo4j Dedicated Node Template (v2 - Based on Debugging Session)
// ============================================================================
// Purpose: Base template for creating dedicated Neo4j nodes for specific actions,
//          intended to be used with the "multiple instances" pattern for AI Agents.
// Usage:
// 1. Create a directory: nodes/Neo4jYourActionName/
// 2. Copy this file into that directory.
// 3. Rename this file: Neo4jYourActionName.node.ts
// 4. Rename the class: export class Neo4jYourActionName implements INodeType { ... }
// 5. Update the description object: displayName, name ('neo4jYourActionName'), description, properties, etc.
// 6. Place an icon file (e.g., neo4j.svg or a custom icon.svg) in this directory. Update 'icon' path if needed.
// 7. Implement the execute method with specific Cypher logic for this action.
// 8. Register the compiled JS path (e.g., "dist/nodes/Neo4jYourActionName/Neo4jYourActionName.node.js")
//    in package.json's n8n.nodes array.
// ============================================================================

import type {
	IExecuteFunctions,
	IDataObject,
	INodeExecutionData,
	INodeType,
	INodeTypeDescription,
	// Add other necessary types from n8n-workflow if needed
} from 'n8n-workflow';
import { NodeOperationError } from 'n8n-workflow';
import type { Session } from 'neo4j-driver';

// --- IMPORTANT: Shared Utilities ---
// Assuming this node file is at: nodes/Neo4jYourActionName/Neo4jYourActionName.node.ts
// Assuming shared helpers are at: nodes/neo4j/helpers/
import {
	// connectToNeo4j, // TODO: Implement or import actual connection function
	runCypherQuery,
	parseNeo4jError,
	// parseJsonParameter, // Import only if needed
} from '../neo4j/helpers/utils'; // Verify this relative path

// --- Node Class Definition ---
// TODO: Rename class to match file name (e.g., Neo4jFindBusinessByName)
export class Neo4jTemplateNode implements INodeType {

	// --- Node Description for n8n UI ---
	description: INodeTypeDescription = {
		// TODO: Update basic node information
		displayName: 'Neo4j: My Action', // User-friendly name
		name: 'neo4jMyAction', // Technical name (camelCase, unique, matches class/file base)
		icon: 'file:icon.svg', // Assumes icon file is in the same directory
		group: ['database'], // Or a more specific group like 'neo4jActions'
		version: 1,
		subtitle: '={{$parameter["someInput"]}}', // Optional: Show a key parameter value dynamically
		description: 'Description of what this specific node does', // TODO: Describe the node's purpose
		defaults: {
			name: 'Neo4j My Action', // Default name for instances in the workflow
		},
		inputs: ['main'],
		outputs: ['main'],
		// usableAsTool: true, // Removed - Use multiple instances in workflow instead

		// --- Credentials ---
		credentials: [
			{
				// IMPORTANT: If encountering "package could not be loaded" errors when multiple
				// Neo4j nodes are registered, try defining a UNIQUE credential name for EACH node type
				// (e.g., 'neo4jMyActionApi') and creating a corresponding credential file,
				// even if the properties are identical to 'neo4jApi'.
				name: 'neo4jApi', // TODO: Consider using a unique name like 'neo4jMyActionApi'
				required: true,
			},
		],

		// --- Node Specific Input Properties ---
		properties: [
			// TODO: Define the input fields needed for this specific action.
			// Example:
			// {
			// 	displayName: 'Search Term',
			// 	name: 'searchTerm', // Used in getNodeParameter
			// 	type: 'string',
			// 	required: true,
			// 	default: '',
			// 	description: 'The keyword for fuzzy name matching',
			// },
		],
	};

	// Optional: Define methods like loadOptions if needed
	// methods = { ... };

	// --- Node Execution Logic ---
	async execute(this: IExecuteFunctions): Promise<INodeExecutionData[][]> {
		const items = this.getInputData();
		const returnData: INodeExecutionData[] = [];
		let session: Session | undefined;

		try {
			// 1. Get Credentials
			// TODO: Use the correct credential name defined above
			const credentials = await this.getCredentials('neo4jApi'); // Or 'neo4jMyActionApi'

			// 2. Establish Neo4j Session
			// TODO: Replace placeholder with robust connection logic (ideally a shared function)
			const tempSession = (this.helpers as any).neo4j?.getSession?.(credentials);
			if (!tempSession) {
				throw new NodeOperationError(this.getNode(), 'Failed to establish Neo4j session.');
			}
			session = tempSession; // Assign only after check

			// 3. Loop Through Input Items (Adjust if node runs only once)
			for (let i = 0; i < items.length; i++) {
				try {
					// 4. Get Input Parameters for Current Item
					// TODO: Get all parameters defined in 'properties' using this.getNodeParameter(name, i, defaultValue)
					// Example: const searchTerm = this.getNodeParameter('searchTerm', i, '') as string;

					// 5. Define Specific Cypher Query & Parameters for this Action
					// TODO: Write the Cypher query for this node's specific task. Use $parameters.
					const query = 'RETURN "Implement Cypher Query Here" AS message'; // Placeholder
					const parameters: IDataObject = {}; // TODO: Populate with values from getNodeParameter
					const isWrite = false; // TODO: Set to true for CREATE/MERGE/SET/DELETE

					// 6. Execute Query
					// Use non-null assertion '!' because session is checked above
					const results = await runCypherQuery.call(this, session!, query, parameters, isWrite, i);
					// results should be INodeExecutionData[]
					returnData.push(...results);

				} catch (error) {
					// 7. Handle Item-Level Errors (Continue on Fail)
					if (this.continueOnFail(error)) {
						const item = items[i];
						const parsedError = parseNeo4jError(this.getNode(), error);
						// Pass the parsed error object directly
						const errorData = { ...item.json, error: parsedError };
						returnData.push({ json: errorData, pairedItem: { item: i } });
						continue;
					}
					// Re-throw error to be caught by outer catch
					throw error;
				}
			}

			// 8. Return Results
			return [returnData];

		} catch (error) {
			// 9. Handle Node-Level Errors (e.g., connection)
			if (error instanceof NodeOperationError) { throw error; }
			throw parseNeo4jError(this.getNode(), error);
		} finally {
			// 10. Close Session
			if (session) {
				try {
					await session.close();
					this.logger.debug('Neo4j session closed successfully.');
				} catch (closeError) {
					this.logger.error('Error closing Neo4j session:', closeError);
				}
			}
		}
	}
}
